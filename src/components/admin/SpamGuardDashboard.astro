---
/**
 * SpamGuard Admin Dashboard Component
 * Real-time monitoring and management interface for the anti-spam system
 */

interface Props {
  readonly?: boolean;
}

const { readonly = false } = Astro.props;
---

<div class="spam-guard-dashboard">
  <header class="dashboard-header">
    <h1>SpamGuard Dashboard</h1>
    <div class="header-controls">
      <button id="refresh-btn" class="btn btn-secondary">
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M23 4v6h-6M1 20v-6h6M3.51 9a9 9 0 0114.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0020.49 15"/>
        </svg>
        Refresh
      </button>
      <select id="time-range" class="time-range-select">
        <option value="1h">Last Hour</option>
        <option value="24h" selected>Last 24 Hours</option>
        <option value="7d">Last 7 Days</option>
        <option value="30d">Last 30 Days</option>
      </select>
    </div>
  </header>

  <!-- Overview Stats -->
  <section class="stats-grid">
    <div class="stat-card">
      <div class="stat-value" id="total-submissions">0</div>
      <div class="stat-label">Total Submissions</div>
      <div class="stat-change" id="total-change">--</div>
    </div>
    <div class="stat-card blocked">
      <div class="stat-value" id="blocked-count">0</div>
      <div class="stat-label">Blocked</div>
      <div class="stat-change" id="blocked-change">--</div>
    </div>
    <div class="stat-card quarantined">
      <div class="stat-value" id="quarantined-count">0</div>
      <div class="stat-label">Quarantined</div>
      <div class="stat-change" id="quarantined-change">--</div>
    </div>
    <div class="stat-card allowed">
      <div class="stat-value" id="allowed-count">0</div>
      <div class="stat-label">Allowed</div>
      <div class="stat-change" id="allowed-change">--</div>
    </div>
  </section>

  <!-- Threat Level Indicator -->
  <section class="threat-level">
    <h2>Current Threat Level</h2>
    <div class="threat-indicator" id="threat-indicator">
      <div class="threat-meter">
        <div class="threat-bar" id="threat-bar"></div>
      </div>
      <div class="threat-labels">
        <span>Low</span>
        <span>Medium</span>
        <span>High</span>
        <span>Critical</span>
      </div>
    </div>
  </section>

  <!-- Real-time Activity -->
  <section class="activity-feed">
    <h2>Real-time Activity</h2>
    <div class="activity-container" id="activity-feed">
      <!-- Activity items will be inserted here -->
    </div>
  </section>

  <!-- Quarantine Queue -->
  <section class="quarantine-section">
    <h2>Quarantine Queue <span class="badge" id="quarantine-badge">0</span></h2>
    <div class="quarantine-list" id="quarantine-list">
      <!-- Quarantine items will be inserted here -->
    </div>
  </section>

  <!-- Top Threats -->
  <section class="threats-section">
    <h2>Top Threats</h2>
    <div class="threats-chart" id="threats-chart">
      <!-- Chart will be rendered here -->
    </div>
  </section>

  <!-- Performance Metrics -->
  <section class="performance-section">
    <h2>Performance</h2>
    <div class="performance-grid">
      <div class="metric">
        <span class="metric-label">Avg Processing Time</span>
        <span class="metric-value" id="avg-processing">--ms</span>
      </div>
      <div class="metric">
        <span class="metric-label">P95 Processing Time</span>
        <span class="metric-value" id="p95-processing">--ms</span>
      </div>
      <div class="metric">
        <span class="metric-label">Success Rate</span>
        <span class="metric-value" id="success-rate">--%</span>
      </div>
      <div class="metric">
        <span class="metric-label">False Positive Rate</span>
        <span class="metric-value" id="false-positive">--%</span>
      </div>
    </div>
  </section>

  <!-- Configuration Panel -->
  {!readonly && (
    <section class="config-section">
      <h2>Configuration</h2>
      <div class="config-grid">
        <div class="config-item">
          <label for="strict-mode">Strict Mode</label>
          <input type="checkbox" id="strict-mode" />
        </div>
        <div class="config-item">
          <label for="learning-mode">Learning Mode</label>
          <input type="checkbox" id="learning-mode" />
        </div>
        <div class="config-item">
          <label for="quarantine-threshold">Quarantine Threshold</label>
          <input type="range" id="quarantine-threshold" min="0" max="100" value="70" />
          <span id="quarantine-value">70%</span>
        </div>
        <div class="config-item">
          <label for="block-threshold">Block Threshold</label>
          <input type="range" id="block-threshold" min="0" max="100" value="90" />
          <span id="block-value">90%</span>
        </div>
      </div>
      <button id="save-config" class="btn btn-primary">Save Configuration</button>
    </section>
  )}

  <!-- Feedback System -->
  <section class="feedback-section">
    <h2>Feedback System</h2>
    <p class="feedback-description">Help improve spam detection by providing feedback on recent submissions</p>
    <div class="feedback-form">
      <div class="form-group">
        <label for="feedback-id">Submission/Quarantine ID:</label>
        <input type="text" id="feedback-id" placeholder="e.g., q_1234567890 or sub_abc123" />
      </div>
      <div class="form-group">
        <label>Was this spam?</label>
        <div class="radio-group">
          <label class="radio-label">
            <input type="radio" name="was-spam" value="true" />
            <span>Yes, it was spam</span>
          </label>
          <label class="radio-label">
            <input type="radio" name="was-spam" value="false" />
            <span>No, legitimate submission</span>
          </label>
        </div>
      </div>
      <div class="form-group">
        <label for="feedback-notes">Additional Notes (optional):</label>
        <textarea id="feedback-notes" rows="3" placeholder="Any patterns or indicators to help improve detection..."></textarea>
      </div>
      <button id="submit-feedback" class="btn btn-primary">Submit Feedback</button>
      <div id="feedback-message" class="feedback-message"></div>
    </div>
    
    <div class="feedback-stats">
      <h3>Feedback Statistics</h3>
      <div class="stats-row">
        <div class="stat-item">
          <span class="stat-label">Total Feedback:</span>
          <span class="stat-value" id="total-feedback">0</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Accuracy:</span>
          <span class="stat-value" id="feedback-accuracy">--%</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">False Positives:</span>
          <span class="stat-value" id="false-positives">0</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">False Negatives:</span>
          <span class="stat-value" id="false-negatives">0</span>
        </div>
      </div>
    </div>
  </section>

  <!-- Actions Panel -->
  {!readonly && (
    <section class="actions-section">
      <h2>Actions</h2>
      <div class="actions-grid">
        <button id="export-data" class="btn btn-secondary">Export Data</button>
        <button id="clear-cache" class="btn btn-secondary">Clear Cache</button>
        <button id="generate-report" class="btn btn-secondary">Generate Report</button>
        <button id="manage-rules" class="btn btn-secondary">Manage Rules</button>
      </div>
    </section>
  )}
</div>

<style>
  .spam-guard-dashboard {
    padding: 20px;
    max-width: 1400px;
    margin: 0 auto;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    padding-bottom: 20px;
    border-bottom: 2px solid #e0e0e0;
  }

  .dashboard-header h1 {
    margin: 0;
    font-size: 28px;
    color: #333;
  }

  .header-controls {
    display: flex;
    gap: 10px;
    align-items: center;
  }

  .btn {
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    display: inline-flex;
    align-items: center;
    gap: 6px;
    transition: all 0.2s;
  }

  .btn-primary {
    background: #007bff;
    color: white;
  }

  .btn-primary:hover {
    background: #0056b3;
  }

  .btn-secondary {
    background: #6c757d;
    color: white;
  }

  .btn-secondary:hover {
    background: #545b62;
  }

  .time-range-select {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
  }

  .stat-card {
    background: white;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    border-left: 4px solid #007bff;
  }

  .stat-card.blocked {
    border-left-color: #dc3545;
  }

  .stat-card.quarantined {
    border-left-color: #ffc107;
  }

  .stat-card.allowed {
    border-left-color: #28a745;
  }

  .stat-value {
    font-size: 32px;
    font-weight: bold;
    color: #333;
  }

  .stat-label {
    color: #666;
    font-size: 14px;
    margin-top: 5px;
  }

  .stat-change {
    font-size: 12px;
    margin-top: 10px;
    color: #666;
  }

  .threat-level {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .threat-level h2 {
    margin-top: 0;
    font-size: 20px;
    color: #333;
  }

  .threat-meter {
    height: 30px;
    background: #e0e0e0;
    border-radius: 15px;
    overflow: hidden;
    margin: 20px 0;
  }

  .threat-bar {
    height: 100%;
    background: linear-gradient(to right, #28a745, #ffc107, #ff6b6b);
    width: 0%;
    transition: width 0.5s ease;
  }

  .threat-labels {
    display: flex;
    justify-content: space-between;
    font-size: 12px;
    color: #666;
  }

  .activity-feed {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .activity-container {
    max-height: 300px;
    overflow-y: auto;
    margin-top: 15px;
  }

  .activity-item {
    padding: 10px;
    border-bottom: 1px solid #f0f0f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .activity-item:last-child {
    border-bottom: none;
  }

  .quarantine-section,
  .threats-section,
  .performance-section,
  .config-section,
  .actions-section,
  .feedback-section {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 30px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  }

  .quarantine-section h2,
  .threats-section h2,
  .performance-section h2,
  .config-section h2,
  .actions-section h2,
  .feedback-section h2 {
    margin-top: 0;
    font-size: 20px;
    color: #333;
  }

  .feedback-description {
    color: #666;
    font-size: 14px;
    margin: 10px 0 20px;
  }

  .feedback-form {
    background: #f8f9fa;
    padding: 20px;
    border-radius: 6px;
    margin-bottom: 30px;
  }

  .form-group {
    margin-bottom: 20px;
  }

  .form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #333;
    font-size: 14px;
  }

  .form-group input[type="text"],
  .form-group textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }

  .radio-group {
    display: flex;
    gap: 20px;
  }

  .radio-label {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    font-size: 14px;
  }

  .radio-label input[type="radio"] {
    margin: 0;
  }

  .feedback-message {
    margin-top: 15px;
    padding: 10px;
    border-radius: 4px;
    display: none;
    font-size: 14px;
  }

  .feedback-message.success {
    display: block;
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
  }

  .feedback-message.error {
    display: block;
    background: #f8d7da;
    color: #721c24;
    border: 1px solid #f5c6cb;
  }

  .feedback-stats {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 6px;
  }

  .feedback-stats h3 {
    margin-top: 0;
    margin-bottom: 15px;
    font-size: 16px;
    color: #333;
  }

  .stats-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 15px;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    gap: 5px;
  }

  .stat-item .stat-label {
    font-size: 12px;
    color: #666;
  }

  .stat-item .stat-value {
    font-size: 20px;
    font-weight: bold;
    color: #333;
  }

  .badge {
    background: #dc3545;
    color: white;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 12px;
    margin-left: 10px;
  }

  .quarantine-list {
    margin-top: 15px;
  }

  .quarantine-item {
    padding: 15px;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    margin-bottom: 15px;
    background: #fafafa;
    transition: background 0.2s;
  }
  
  .quarantine-item:hover {
    background: #f5f5f5;
    border-color: #d0d0d0;
  }
  
  .quarantine-info {
    flex: 1;
    margin-bottom: 15px;
  }
  
  .quarantine-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
    padding-bottom: 8px;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .timestamp {
    font-size: 12px;
    color: #999;
  }
  
  .quarantine-details {
    display: grid;
    gap: 8px;
  }
  
  .detail-row {
    display: flex;
    align-items: flex-start;
    gap: 10px;
    font-size: 13px;
  }
  
  .detail-label {
    font-weight: 600;
    color: #666;
    min-width: 120px;
  }
  
  .detail-value {
    color: #333;
    flex: 1;
  }
  
  .confidence-high {
    color: #dc3545;
    font-weight: bold;
  }
  
  .confidence-medium {
    color: #ffc107;
    font-weight: bold;
  }
  
  .confidence-low {
    color: #28a745;
    font-weight: bold;
  }
  
  .quarantine-actions {
    display: flex;
    gap: 8px;
    flex-wrap: wrap;
  }
  
  .btn-sm {
    padding: 6px 12px;
    font-size: 13px;
  }
  
  .btn-info {
    background: #17a2b8;
    color: white;
  }
  
  .btn-info:hover {
    background: #138496;
  }
  
  .btn-success {
    background: #28a745;
    color: white;
  }
  
  .btn-success:hover {
    background: #218838;
  }
  
  .btn-danger {
    background: #dc3545;
    color: white;
  }
  
  .btn-danger:hover {
    background: #c82333;
  }
  
  .no-items {
    text-align: center;
    padding: 30px;
    color: #999;
    font-style: italic;
  }

  .performance-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 20px;
    margin-top: 15px;
  }

  .metric {
    display: flex;
    flex-direction: column;
  }

  .metric-label {
    font-size: 12px;
    color: #666;
    margin-bottom: 5px;
  }

  .metric-value {
    font-size: 24px;
    font-weight: bold;
    color: #333;
  }

  .config-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin: 20px 0;
  }

  .config-item {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .config-item label {
    flex: 1;
    font-size: 14px;
  }

  .config-item input[type="checkbox"] {
    width: 20px;
    height: 20px;
  }

  .config-item input[type="range"] {
    flex: 1;
  }

  .actions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
    margin-top: 15px;
  }

  /* Modal Styles */
  .quarantine-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
  }
  
  .modal-content {
    background: white;
    border-radius: 8px;
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow: auto;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid #e0e0e0;
  }
  
  .modal-header h3 {
    margin: 0;
    font-size: 18px;
    color: #333;
  }
  
  .close-btn {
    background: none;
    border: none;
    font-size: 24px;
    color: #999;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .close-btn:hover {
    color: #333;
  }
  
  .modal-body {
    padding: 20px;
  }
  
  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }
    
    .dashboard-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 15px;
    }
    
    .header-controls {
      width: 100%;
      justify-content: space-between;
    }
    
    .quarantine-item {
      flex-direction: column;
    }
    
    .quarantine-actions {
      margin-top: 10px;
      width: 100%;
    }
    
    .modal-content {
      width: 95%;
      max-height: 90vh;
    }
  }
</style>

<script>
  // Dashboard functionality
  class SpamGuardDashboard {
    constructor() {
      this.initializeEventListeners();
      this.startPolling();
      this.loadDashboardData();
    }

    initializeEventListeners() {
      document.getElementById('refresh-btn')?.addEventListener('click', () => this.loadDashboardData());
      document.getElementById('time-range')?.addEventListener('change', () => this.loadDashboardData());
      document.getElementById('save-config')?.addEventListener('click', () => this.saveConfiguration());
      document.getElementById('export-data')?.addEventListener('click', () => this.exportData());
      document.getElementById('clear-cache')?.addEventListener('click', () => this.clearCache());
      document.getElementById('generate-report')?.addEventListener('click', () => this.generateReport());
      document.getElementById('submit-feedback')?.addEventListener('click', () => this.submitFeedback());
      
      // Threshold sliders
      document.getElementById('quarantine-threshold')?.addEventListener('input', (e) => {
        document.getElementById('quarantine-value').textContent = e.target.value + '%';
      });
      
      document.getElementById('block-threshold')?.addEventListener('input', (e) => {
        document.getElementById('block-value').textContent = e.target.value + '%';
      });
    }

    async loadDashboardData() {
      try {
        const response = await fetch('/api/antispam/dashboard');
        const data = await response.json();
        this.updateDashboard(data);
      } catch (error) {
        console.error('Failed to load dashboard data:', error);
      }
    }

    updateDashboard(data) {
      // Update stats
      document.getElementById('total-submissions').textContent = data.stats.total;
      document.getElementById('blocked-count').textContent = data.stats.blocked;
      document.getElementById('quarantined-count').textContent = data.stats.quarantined;
      document.getElementById('allowed-count').textContent = data.stats.allowed;
      
      // Update threat level
      const threatBar = document.getElementById('threat-bar');
      threatBar.style.width = `${data.threatLevel * 100}%`;
      
      // Update activity feed
      this.updateActivityFeed(data.recentActivity);
      
      // Update quarantine queue
      this.updateQuarantineQueue(data.quarantine);
      
      // Update performance metrics
      document.getElementById('avg-processing').textContent = `${data.performance.avgProcessing.toFixed(2)}ms`;
      document.getElementById('p95-processing').textContent = `${data.performance.p95Processing.toFixed(2)}ms`;
      document.getElementById('success-rate').textContent = `${(data.performance.successRate * 100).toFixed(1)}%`;
    }

    updateActivityFeed(activities) {
      const feed = document.getElementById('activity-feed');
      feed.innerHTML = activities.map(activity => `
        <div class="activity-item">
          <div>
            <strong>${activity.action}</strong>
            <span>${activity.ip}</span>
          </div>
          <span>${this.formatTime(activity.timestamp)}</span>
        </div>
      `).join('');
    }

    updateQuarantineQueue(items) {
      const list = document.getElementById('quarantine-list');
      const badge = document.getElementById('quarantine-badge');
      
      badge.textContent = items.length;
      
      if (items.length === 0) {
        list.innerHTML = '<div class="no-items">No items in quarantine</div>';
        return;
      }
      
      list.innerHTML = items.map(item => `
        <div class="quarantine-item" data-id="${item.id}">
          <div class="quarantine-info">
            <div class="quarantine-header">
              <strong>ID: ${item.id}</strong>
              <span class="timestamp">${this.formatTime(item.timestamp)}</span>
            </div>
            <div class="quarantine-details">
              <div class="detail-row">
                <span class="detail-label">Confidence:</span>
                <span class="detail-value confidence-${this.getConfidenceClass(item.confidence)}">
                  ${(item.confidence * 100).toFixed(1)}%
                </span>
              </div>
              <div class="detail-row">
                <span class="detail-label">Threats:</span>
                <span class="detail-value">${item.threats.join(', ')}</span>
              </div>
              ${item.email ? `
              <div class="detail-row">
                <span class="detail-label">Email:</span>
                <span class="detail-value">${item.email}</span>
              </div>` : ''}
              ${item.message ? `
              <div class="detail-row">
                <span class="detail-label">Message Preview:</span>
                <span class="detail-value">${this.truncateText(item.message, 100)}</span>
              </div>` : ''}
            </div>
          </div>
          <div class="quarantine-actions">
            <button onclick="viewQuarantineDetails('${item.id}')" class="btn btn-sm btn-info">View Details</button>
            <button onclick="reviewQuarantine('${item.id}', true)" class="btn btn-sm btn-success">Approve</button>
            <button onclick="reviewQuarantine('${item.id}', false)" class="btn btn-sm btn-danger">Block</button>
            <button onclick="provideFeedback('${item.id}')" class="btn btn-sm btn-secondary">Feedback</button>
          </div>
        </div>
      `).join('');
    }
    
    getConfidenceClass(confidence) {
      if (confidence >= 0.9) return 'high';
      if (confidence >= 0.7) return 'medium';
      return 'low';
    }
    
    truncateText(text, maxLength) {
      if (!text) return '';
      if (text.length <= maxLength) return text;
      return text.substring(0, maxLength) + '...';
    }

    async saveConfiguration() {
      const config = {
        strictMode: document.getElementById('strict-mode').checked,
        learningMode: document.getElementById('learning-mode').checked,
        quarantineThreshold: parseInt(document.getElementById('quarantine-threshold').value) / 100,
        blockThreshold: parseInt(document.getElementById('block-threshold').value) / 100
      };
      
      try {
        await fetch('/api/antispam/config', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(config)
        });
        alert('Configuration saved successfully');
      } catch (error) {
        alert('Failed to save configuration');
      }
    }

    async exportData() {
      window.location.href = '/api/antispam/export';
    }

    async clearCache() {
      if (confirm('Are you sure you want to clear the cache?')) {
        await fetch('/api/antispam/cache', { method: 'DELETE' });
        alert('Cache cleared');
      }
    }

    async generateReport() {
      window.location.href = '/api/antispam/report';
    }

    async submitFeedback() {
      const feedbackId = document.getElementById('feedback-id').value.trim();
      const wasSpamRadio = document.querySelector('input[name="was-spam"]:checked');
      const feedbackNotes = document.getElementById('feedback-notes').value.trim();
      const messageDiv = document.getElementById('feedback-message');
      
      if (!feedbackId) {
        this.showFeedbackMessage('Please enter a Submission or Quarantine ID', 'error');
        return;
      }
      
      if (!wasSpamRadio) {
        this.showFeedbackMessage('Please select whether this was spam or not', 'error');
        return;
      }
      
      const wasSpam = wasSpamRadio.value === 'true';
      
      try {
        const response = await fetch('/api/antispam/feedback', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            submissionId: feedbackId,
            wasSpam: wasSpam,
            feedback: feedbackNotes
          })
        });
        
        if (response.ok) {
          this.showFeedbackMessage('Feedback submitted successfully! The system will learn from this.', 'success');
          // Clear form
          document.getElementById('feedback-id').value = '';
          document.querySelector('input[name="was-spam"]:checked').checked = false;
          document.getElementById('feedback-notes').value = '';
          // Reload feedback stats
          this.loadFeedbackStats();
        } else {
          this.showFeedbackMessage('Failed to submit feedback. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Feedback submission error:', error);
        this.showFeedbackMessage('Error submitting feedback. Please try again.', 'error');
      }
    }
    
    showFeedbackMessage(message, type) {
      const messageDiv = document.getElementById('feedback-message');
      messageDiv.textContent = message;
      messageDiv.className = `feedback-message ${type}`;
      
      setTimeout(() => {
        messageDiv.className = 'feedback-message';
      }, 5000);
    }
    
    async loadFeedbackStats() {
      try {
        const response = await fetch('/api/antispam/feedback');
        const stats = await response.json();
        
        document.getElementById('total-feedback').textContent = stats.totalFeedback || 0;
        document.getElementById('feedback-accuracy').textContent = 
          stats.accuracy ? `${(stats.accuracy * 100).toFixed(1)}%` : '--';
        document.getElementById('false-positives').textContent = stats.falsePositives || 0;
        document.getElementById('false-negatives').textContent = stats.falseNegatives || 0;
      } catch (error) {
        console.error('Failed to load feedback stats:', error);
      }
    }

    formatTime(timestamp) {
      const date = new Date(timestamp);
      return date.toLocaleTimeString();
    }

    startPolling() {
      this.loadFeedbackStats(); // Load feedback stats on start
      setInterval(() => {
        this.loadDashboardData();
        this.loadFeedbackStats();
      }, 30000); // Poll every 30 seconds
    }
  }

  // Initialize dashboard
  new SpamGuardDashboard();

  // Global functions for quarantine management
  window.reviewQuarantine = async function(id, approved) {
    try {
      const response = await fetch(`/api/antispam/quarantine/${id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ approved })
      });
      
      if (response.ok) {
        // Also submit feedback
        await fetch('/api/antispam/feedback', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            quarantineId: id,
            wasSpam: !approved,
            feedback: approved ? 'User approved - not spam' : 'User rejected - confirmed spam'
          })
        });
        
        location.reload();
      } else {
        alert('Failed to review item');
      }
    } catch (error) {
      alert('Failed to review item');
    }
  };
  
  window.viewQuarantineDetails = async function(id) {
    // Create modal to show full details
    const modal = document.createElement('div');
    modal.className = 'quarantine-modal';
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>Quarantine Details: ${id}</h3>
          <button onclick="this.closest('.quarantine-modal').remove()" class="close-btn">&times;</button>
        </div>
        <div class="modal-body">
          <p>Loading details...</p>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
    
    // In a real implementation, fetch full details from API
    // For now, just show a message
    setTimeout(() => {
      modal.querySelector('.modal-body').innerHTML = `
        <p>Full submission details would be loaded here from the API.</p>
        <p>This would include the complete message, all metadata, and threat analysis.</p>
      `;
    }, 500);
  };
  
  window.provideFeedback = function(id) {
    // Pre-fill the feedback form with the quarantine ID
    document.getElementById('feedback-id').value = id;
    document.getElementById('feedback-id').scrollIntoView({ behavior: 'smooth' });
    document.getElementById('feedback-id').focus();
  };
</script>