---
export interface Props {
  src: string;
  alt: string;
  width?: number;
  height?: number;
  loading?: 'lazy' | 'eager';
  class?: string;
  sizes?: string;
}

const { 
  src, 
  alt, 
  width, 
  height, 
  loading = 'lazy',
  class: className = '',
  sizes = '100vw'
} = Astro.props;

// Generate WebP and placeholder paths
const basename = src.substring(src.lastIndexOf('/') + 1, src.lastIndexOf('.'));
const directory = src.substring(0, src.lastIndexOf('/'));
const webpSrc = `${directory}/optimized/${basename}.webp`;
const placeholderSrc = `${directory}/optimized/${basename}-placeholder.jpg`;
const optimizedJpgSrc = `${directory}/optimized/${basename}-optimized.jpg`;

// Determine if this is a critical above-the-fold image
const isEager = loading === 'eager';
---

<picture class={`optimized-image-wrapper ${className}`}>
  <!-- WebP format for modern browsers -->
  <source
    type="image/webp"
    srcset={webpSrc}
    sizes={sizes}
  />
  
  <!-- Optimized JPEG fallback -->
  <img
    src={optimizedJpgSrc}
    alt={alt}
    width={width}
    height={height}
    loading={loading}
    decoding={isEager ? 'sync' : 'async'}
    class={`optimized-image ${className}`}
    style={`background-image: url(${placeholderSrc}); background-size: cover; background-position: center;`}
    onload="this.style.backgroundImage='none'"
  />
</picture>

<style>
  .optimized-image-wrapper {
    display: block;
    position: relative;
    overflow: hidden;
  }
  
  .optimized-image {
    display: block;
    width: 100%;
    height: auto;
    transition: opacity 0.3s ease-in-out;
  }
  
  /* Placeholder blur effect */
  .optimized-image[loading="lazy"] {
    filter: blur(5px);
    transform: scale(1.02);
  }
  
  .optimized-image.loaded {
    filter: none;
    transform: scale(1);
  }
</style>

<script>
  // Progressive image loading enhancement
  document.addEventListener('DOMContentLoaded', () => {
    const images = document.querySelectorAll('.optimized-image[loading="lazy"]');
    
    if ('IntersectionObserver' in window) {
      const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const img = entry.target;
            img.addEventListener('load', () => {
              img.classList.add('loaded');
            });
            observer.unobserve(img);
          }
        });
      }, {
        rootMargin: '50px 0px',
        threshold: 0.01
      });
      
      images.forEach(img => imageObserver.observe(img));
    } else {
      // Fallback for older browsers
      images.forEach(img => {
        img.addEventListener('load', () => {
          img.classList.add('loaded');
        });
      });
    }
  });
</script>