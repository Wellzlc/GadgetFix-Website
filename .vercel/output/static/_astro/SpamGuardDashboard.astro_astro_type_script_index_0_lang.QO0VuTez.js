new class{constructor(){this.initializeEventListeners(),this.startPolling(),this.loadDashboardData()}initializeEventListeners(){document.getElementById("refresh-btn")?.addEventListener("click",()=>this.loadDashboardData()),document.getElementById("time-range")?.addEventListener("change",()=>this.loadDashboardData()),document.getElementById("save-config")?.addEventListener("click",()=>this.saveConfiguration()),document.getElementById("export-data")?.addEventListener("click",()=>this.exportData()),document.getElementById("clear-cache")?.addEventListener("click",()=>this.clearCache()),document.getElementById("generate-report")?.addEventListener("click",()=>this.generateReport()),document.getElementById("submit-feedback")?.addEventListener("click",()=>this.submitFeedback()),document.getElementById("quarantine-threshold")?.addEventListener("input",e=>{document.getElementById("quarantine-value").textContent=e.target.value+"%"}),document.getElementById("block-threshold")?.addEventListener("input",e=>{document.getElementById("block-value").textContent=e.target.value+"%"})}async loadDashboardData(){try{const e=await fetch("/api/antispam/dashboard"),t=await e.json();this.updateDashboard(t)}catch(e){}}updateDashboard(e){document.getElementById("total-submissions").textContent=e.stats.total,document.getElementById("blocked-count").textContent=e.stats.blocked,document.getElementById("quarantined-count").textContent=e.stats.quarantined,document.getElementById("allowed-count").textContent=e.stats.allowed;document.getElementById("threat-bar").style.width=100*e.threatLevel+"%",this.updateActivityFeed(e.recentActivity),this.updateQuarantineQueue(e.quarantine),document.getElementById("avg-processing").textContent=`${e.performance.avgProcessing.toFixed(2)}ms`,document.getElementById("p95-processing").textContent=`${e.performance.p95Processing.toFixed(2)}ms`,document.getElementById("success-rate").textContent=`${(100*e.performance.successRate).toFixed(1)}%`}updateActivityFeed(e){document.getElementById("activity-feed").innerHTML=e.map(e=>`\n        <div class="activity-item">\n          <div>\n            <strong>${e.action}</strong>\n            <span>${e.ip}</span>\n          </div>\n          <span>${this.formatTime(e.timestamp)}</span>\n        </div>\n      `).join("")}updateQuarantineQueue(e){const t=document.getElementById("quarantine-list");document.getElementById("quarantine-badge").textContent=e.length,0!==e.length?t.innerHTML=e.map(e=>`\n        <div class="quarantine-item" data-id="${e.id}">\n          <div class="quarantine-info">\n            <div class="quarantine-header">\n              <strong>ID: ${e.id}</strong>\n              <span class="timestamp">${this.formatTime(e.timestamp)}</span>\n            </div>\n            <div class="quarantine-details">\n              <div class="detail-row">\n                <span class="detail-label">Confidence:</span>\n                <span class="detail-value confidence-${this.getConfidenceClass(e.confidence)}">\n                  ${(100*e.confidence).toFixed(1)}%\n                </span>\n              </div>\n              <div class="detail-row">\n                <span class="detail-label">Threats:</span>\n                <span class="detail-value">${e.threats.join(", ")}</span>\n              </div>\n              ${e.email?`\n              <div class="detail-row">\n                <span class="detail-label">Email:</span>\n                <span class="detail-value">${e.email}</span>\n              </div>`:""}\n              ${e.message?`\n              <div class="detail-row">\n                <span class="detail-label">Message Preview:</span>\n                <span class="detail-value">${this.truncateText(e.message,100)}</span>\n              </div>`:""}\n            </div>\n          </div>\n          <div class="quarantine-actions">\n            <button onclick="viewQuarantineDetails('${e.id}')" class="btn btn-sm btn-info">View Details</button>\n            <button onclick="reviewQuarantine('${e.id}', true)" class="btn btn-sm btn-success">Approve</button>\n            <button onclick="reviewQuarantine('${e.id}', false)" class="btn btn-sm btn-danger">Block</button>\n            <button onclick="provideFeedback('${e.id}')" class="btn btn-sm btn-secondary">Feedback</button>\n          </div>\n        </div>\n      `).join(""):t.innerHTML='<div class="no-items">No items in quarantine</div>'}getConfidenceClass(e){return e>=.9?"high":e>=.7?"medium":"low"}truncateText(e,t){return e?e.length<=t?e:e.substring(0,t)+"...":""}async saveConfiguration(){const e={strictMode:document.getElementById("strict-mode").checked,learningMode:document.getElementById("learning-mode").checked,quarantineThreshold:parseInt(document.getElementById("quarantine-threshold").value)/100,blockThreshold:parseInt(document.getElementById("block-threshold").value)/100};try{await fetch("/api/antispam/config",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),alert("Configuration saved successfully")}catch(t){alert("Failed to save configuration")}}async exportData(){window.location.href="/api/antispam/export"}async clearCache(){confirm("Are you sure you want to clear the cache?")&&(await fetch("/api/antispam/cache",{method:"DELETE"}),alert("Cache cleared"))}async generateReport(){window.location.href="/api/antispam/report"}async submitFeedback(){const e=document.getElementById("feedback-id").value.trim(),t=document.querySelector('input[name="was-spam"]:checked'),a=document.getElementById("feedback-notes").value.trim();if(document.getElementById("feedback-message"),!e)return void this.showFeedbackMessage("Please enter a Submission or Quarantine ID","error");if(!t)return void this.showFeedbackMessage("Please select whether this was spam or not","error");const n="true"===t.value;try{(await fetch("/api/antispam/feedback",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({submissionId:e,wasSpam:n,feedback:a})})).ok?(this.showFeedbackMessage("Feedback submitted successfully! The system will learn from this.","success"),document.getElementById("feedback-id").value="",document.querySelector('input[name="was-spam"]:checked').checked=!1,document.getElementById("feedback-notes").value="",this.loadFeedbackStats()):this.showFeedbackMessage("Failed to submit feedback. Please try again.","error")}catch(s){this.showFeedbackMessage("Error submitting feedback. Please try again.","error")}}showFeedbackMessage(e,t){const a=document.getElementById("feedback-message");a.textContent=e,a.className=`feedback-message ${t}`,setTimeout(()=>{a.className="feedback-message"},5e3)}async loadFeedbackStats(){try{const e=await fetch("/api/antispam/feedback"),t=await e.json();document.getElementById("total-feedback").textContent=t.totalFeedback||0,document.getElementById("feedback-accuracy").textContent=t.accuracy?`${(100*t.accuracy).toFixed(1)}%`:"--",document.getElementById("false-positives").textContent=t.falsePositives||0,document.getElementById("false-negatives").textContent=t.falseNegatives||0}catch(e){}}formatTime(e){return new Date(e).toLocaleTimeString()}startPolling(){this.loadFeedbackStats(),setInterval(()=>{this.loadDashboardData(),this.loadFeedbackStats()},3e4)}},window.reviewQuarantine=async function(e,t){try{(await fetch(`/api/antispam/quarantine/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({approved:t})})).ok?(await fetch("/api/antispam/feedback",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({quarantineId:e,wasSpam:!t,feedback:t?"User approved - not spam":"User rejected - confirmed spam"})}),location.reload()):alert("Failed to review item")}catch(a){alert("Failed to review item")}},window.viewQuarantineDetails=async function(e){const t=document.createElement("div");t.className="quarantine-modal",t.innerHTML=`\n      <div class="modal-content">\n        <div class="modal-header">\n          <h3>Quarantine Details: ${e}</h3>\n          <button onclick="this.closest('.quarantine-modal').remove()" class="close-btn">&times;</button>\n        </div>\n        <div class="modal-body">\n          <p>Loading details...</p>\n        </div>\n      </div>\n    `,document.body.appendChild(t),setTimeout(()=>{t.querySelector(".modal-body").innerHTML="\n        <p>Full submission details would be loaded here from the API.</p>\n        <p>This would include the complete message, all metadata, and threat analysis.</p>\n      "},500)},window.provideFeedback=function(e){document.getElementById("feedback-id").value=e,document.getElementById("feedback-id").scrollIntoView({behavior:"smooth"}),document.getElementById("feedback-id").focus()};
